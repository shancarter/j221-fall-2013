head(lookup)
head(payrolls)
payrolls <- merge(payrolls, lookup, by="team", all.x = T)
payrolls <- merge(payrolls, lookup, by="team", all.x = T)
head(payrolls)
load("data/stats.Rdata")
load("data/payrolls.Rdata")
payrolls <- merge(payrolls, lookup, by="team", all.x = T)
head(payrolls)
is.na(payrolls$code)
payrolls[is.na(payrolls$code),]
payrolls[which(payrolls$team == "Los Angeles Angels"),]
payrolls$team[which(payrolls$team == "Los Angeles Angels")]
payrolls$code[which(payrolls$team == "Los Angeles Angels")] <- ""
payrolls[which(payrolls$team == "Los Angeles Angels"),c("code")]
head(lookup)
lookup
payrolls[which(payrolls$team == "Los Angeles Angels"),c("code")] <- "ANA"
payrolls[which(payrolls$team == "Los Angeles Angels"),c("code")] <- "ANA"#
payrolls[which(payrolls$team == "Florida Marlins"),c("code")] <- "FLA"#
payrolls[which(payrolls$team == "Montreal Expos"),c("code")] <- "WSN"
head(payrolls)
table(is.na(payrolls$code))
head(payrolls)
head(stats)
get_stats_for_year <- function(year) {#
 url <- paste("http://www.baseball-reference.com/leagues/MLB/", year , "-standings.shtml", sep="")#
 tables <- readHTMLTable(url)#
#
 playoffs <- tables[1]#
#
 playoff_teams <- unique(unlist(strsplit(paste(data.frame(playoffs)[,2], collapse=" over \n"), " over \n")))#
#
 codes <- as.character(sapply(playoff_teams, function(x) { lookup$code[which(lookup$name == x )] }))#
#
 standings <- tables$expanded_standings_overall#
 standings <- standings[1:(nrow(standings)-1) ,1:7]#
 standings$year <- year#
 names(standings)[2] <- "code"#
 return (standings)#
#
}#
#
stats <- NULL#
for (i in years) {#
  print(i)#
  df <- get_stats_for_year(i)#
  stats <- rbind(df, stats)#
}
head(stats)
head(payrolls)
merge(stats, payrolls, by=c("code, year"))
head(payrolls)
merge(stats, payrolls, by=c("code", "year"))
merge(stats, payrolls, by=c("code", "year"), all.x=T)
f <- merge(stats, payrolls, by=c("code", "year"), all.x=T)
head(f)
is.na(f$ppsort2)
f[is.na(f$ppsort2),]
load("data/payrolls.Rdata")
load("data/stats.Rdata")
head(payrools)
head(payrolls)
head(stats)
payrolls <- merge(payrolls, lookup, by="team", all.x = T)#
payrolls[which(payrolls$team == "Los Angeles Angels"),c("code")] <- "ANA"#
payrolls[which(payrolls$team == "Florida Marlins"),c("code")] <- "FLA"#
payrolls[which(payrolls$team == "Montreal Expos"),c("code")] <- "WSN"
payrolls
head(payrolls)
head(lookup)
head(stats)
stats$Tm%in%lookup$code
stats[!stats$Tm%in%lookup$code,]
head(lookup)
stats$code <- stats$Tm#
stats <- merge(stats, lookup, by="code", all.x = T)
head(stats)
is.na(stats$code)
stats
head(stats)
head(payrolls)
d2 <- merge(stats, payrolls, by=c("code", "year"))
head(d2)
d2
head(d2)
plot(d2$payroll2, d2$"W-L%")
d2$"W-L%"
d2$pct <- as.numeric(as.character(d2$"W-L%"))
plot(d2$payroll2, d2$pct)
d2$payroll2
d2$payroll2 <- as.numeric(as.character(d2$payroll2))
plot(d2$payroll2, d2$pct)
text(d2$payroll2, d2$pct, labels=paste(d2$code, d2$year), cex=.4)
plot(d2$payroll2, d2$pct, col=ifelse(d2$year == 2013, "red", "grey"))
plot(d2$payroll2, d2$pct, col=ifelse(d2$year == 2013, "red", "grey"), pch=16)
plot(d2$payroll2, d2$pct, col=ifelse(d2$year == 2013, "red", "grey"), pch=16)
plot(d2$payroll2, d2$pct, col=ifelse(d2$year == 2013, "red", "grey"), pch=16)
text(d2$payroll2, d2$pct, labels=paste(d2$code, d2$year), cex=.4)
plot(d2$payroll2, d2$pct, col=ifelse(d2$year == 2013, "red", "grey"), pch=16)
plot(d2$payroll2, d2$pct, col=ifelse(d2$year == 2013, "red", "grey"), pch=16)
text(d2$payroll2, d2$pct, labels=paste(d2$code, d2$year), cex=.4)
url <- "http://www.baseball-reference.com/postseason/"
page <- htmlParse(url)
getNodeSet(page, "//table[@id='nav_table']")
getNodeSet(page, "//")
getNodeSet(page, "")
getNodeSet(page, "*")
page
getNodeSet(page, "//table")
getNodeSet(page, "//table[@class='nav_table']")
getNodeSet(page, "//table[@class='stats_table']")
readHTMLTable(page)
readHTMLTable(page)
readHTMLTable(page)
playoffs <- read.delim("data/playoff-data.tsv")
load("data/payrolls.Rdata")#
load("data/stats.Rdata")#
#
playoffs <- read.delim("data/playoff-data.tsv")
head(stats)
head(payrolls)
stats$code <- stats$Tm#
stats <- merge(stats, lookup, by="code", all.x = T)
head(payrolls)
stats$code <- stats$Tm#
stats <- merge(stats, lookup, by="code", all.x = T)
head(stats)
payrolls <- merge(payrolls, lookup, by="team", all.x = T)#
payrolls[which(payrolls$team == "Los Angeles Angels"),c("code")] <- "ANA"#
payrolls[which(payrolls$team == "Florida Marlins"),c("code")] <- "FLA"#
payrolls[which(payrolls$team == "Montreal Expos"),c("code")] <- "WSN"
head(payrolls)
head(playodds)
head(playoffs)
head(d2)
merge(d2, playoffs, by=c("code", "year"), all.x = T)
d2 <- merge(d2, playoffs, by=c("code", "year"), all.x = T)
head(d2)
d2$top_level[is.na(d2$top_level)] <- 0
head(d2)
library(RColorBrewer)
brewer.display.all()
?brewer
display.brewer.all()
brewer.pal("YlOrRd", 3)
?brewer
brewer.pal(3, "YlOrRd")
barplot(1:4, cols=c("lightgrey", brewer.pal(3, "YlOrRd")))
barplot(1:4, cols=c("#f0f0f0", brewer.pal(3, "YlOrRd")))
barplot(1:4, col=c("lightgrey", brewer.pal(3, "YlOrRd")))
c("lightgrey", brewer.pal(3, "YlOrRd"))
cols[d2$top_level]
cols <- c("lightgrey", brewer.pal(3, "YlOrRd"))
cols[d2$top_level]
head(d2)
d2$pct
d2$payroll2
plot(d2$payroll2, d2$pct)
plot(d2$payroll2, d2$pct, col=cols, pch=16)
head(d2)
table(d2$top_level>0)
plot(d2$payroll2, d2$pct, col=cols, pch=16, cex=.4)
plot(d2$payroll2, d2$pct, col=cols, pch=16, cex=.5)
plot(d2$payroll2, d2$pct, col=cols, pch=16, cex=.7)
plot(d2$payroll2, d2$pct, ifelse(d2$highest_level>0, "red", "lightgrey"), pch=16, cex=.7)
plot(d2$payroll2, d2$pct, ifelse(d2$top_level>0, "red", "lightgrey"), pch=16, cex=.7)
plot(d2$payroll2, d2$pct, col=ifelse(d2$top_level>0, "red", "lightgrey"), pch=16, cex=.7)
mycols <- cols[d2$top_level]
mycols
plot(d2$payroll2, d2$pct, col=mycols, pch=16, cex=.7)
cols
plot(d2$payroll2, d2$pct, col=ifelse(d2$top_level>0, "red", "lightgrey"), pch=16, cex=.7)
text(d2$payroll2, d2$pct, labels=paste(d2$code, d2$year, sep="-"))
plot(d2$payroll2, d2$pct, col=ifelse(d2$top_level>0, "red", "lightgrey"), pch=16, cex=.7)
text(d2$payroll2, d2$pct, labels=paste(d2$code, d2$year, sep="-"), cex=.5)
plot(d2$payroll2, d2$pct, col=ifelse(d2$top_level>0, "red", "lightgrey"), pch=16, cex=.7)
text(d2$payroll2, d2$pct, labels=paste(d2$code, d2$year, sep="-"), cex=.3)
plot(d2$payroll2, d2$pct, col=ifelse(d2$top_level>0, "red", "lightgrey"), pch=16, cex=.7)
cols <- c("lightgrey", rev(brewer.pal(3, "YlOrRd")))
cols
barplot(1:4, col=cols)
cols[1+d2$top_level]
plot(d2$payroll2, d2$pct, col=ifelse(d2$top_level>0, "red", "lightgrey"), pch=16, cex=.7)mycols <- cols[1+d2$top_level]
mycols <- cols[1+d2$top_level]
plot(d2$payroll2, d2$pct, col=mycols, pch=16, cex=.7)
plot(d2$payroll2, d2$pct, col=mycols, pch=16, cex=.9)
display.brewer.all()
plot(d2$payroll2, d2$pct, col=mycols, pch=16, cex=.9)
write.csv(d2, file="../public/_assets/data.csv")
head(d2)
cols
display.brewer.all()
brewer.pal(7, RdPu)
brewer.pal(7, "RdPu")
barplot(1:7, col=brewer.pal(7, "RdPu")
barplot(1:7, col=brewer.pal(7, "RdPu"))
barplot(1:7, col=brewer.pal(7, "RdPu")
barplot(1:7, col=brewer.pal(7, "RdPu") )
brewer.pal(7, "RdPu")
barplot(1:7)
barplot(1:7, col=brewer.pal(7, "RdPu"))
head(d2)
load("data/payrolls.Rdata")#
load("data/stats.Rdata")#
#
playoffs <- read.delim("data/playoff-data.tsv")#
#
d2 <- merge(stats, payrolls, by=c("code", "year"))#
d2$pct <- as.numeric(as.character(d2$"W-L%"))#
merge(d2, playoffs, by=c("code", "year"), all.x = T)#
#
d2$top_level[is.na(d2$top_level)] <- 0#
#
cols <- c("lightgrey", rev(brewer.pal(3, "YlOrRd")))#
mycols <- cols[1+d2$top_level]#
plot(d2$payroll2, d2$pct, col=mycols, pch=16, cex=.9)#
#
write.csv(d2, file="../public/_assets/data.csv")
load("data/payrolls.Rdata")#
load("data/stats.Rdata")#
#
playoffs <- read.delim("data/playoff-data.tsv")#
#
d2 <- merge(stats, payrolls, by=c("code", "year"))#
d2$pct <- as.numeric(as.character(d2$"W-L%"))
stats$code <- stats$Tm#
stats <- merge(stats, lookup, by="code", all.x = T)#
#----------#
payrolls <- merge(payrolls, lookup, by="team", all.x = T)#
payrolls[which(payrolls$team == "Los Angeles Angels"),c("code")] <- "ANA"#
payrolls[which(payrolls$team == "Florida Marlins"),c("code")] <- "FLA"#
payrolls[which(payrolls$team == "Montreal Expos"),c("code")] <- "WSN"#
#
save(stats, file="data/stats.Rdata")#
save(payrolls, file="data/payrolls.Rdata")
playoffs <- read.delim("data/playoff-data.tsv")#
#
d2 <- merge(stats, payrolls, by=c("code", "year"))#
d2$pct <- as.numeric(as.character(d2$"W-L%"))#
d2 <- merge(d2, playoffs, by=c("code", "year"), all.x = T)#
#
d2$top_level[is.na(d2$top_level)] <- 0#
#
cols <- c("lightgrey", rev(brewer.pal(3, "YlOrRd")))#
mycols <- cols[1+d2$top_level]
write.csv(d2, file="../public/_assets/data.csv")
setwd("/~Desktop")
setwd("~/Desktop")
dir()
data <- read.delim("ssamatab2.txt")
head(data)
data <- read.delim("data.tsv")
head(data)
dim(data)
table(data$stfips)
unique(data$area)
head(data)
subset(data, area == "Chico, CA MSA")
ca <- subset(data, stfips == 6)
ca
dim(ca)
head(ca)
plot(ca$rate)
setwd("~/personal/j221-fall-2013/classes/maps-intro")
library(maptools)#
library(RColorBrewer)#
#
data <- read.delim("merged-multirace.txt")
head(data)
download the shape file#
shapes <- readShapePoly("shapes/ca/counties.shp")
head(shapes)
plot(shapes)
map_data <- data.frame(shapes)
map_data
data$FIPS <- sprintf("%05d",data$fips)
head(data)
race <- "pcthispanic"
year = 2010
this_decade <- subset(data, year == decade)
decade = 2010
this_decade <- subset(data, year == decade)
this_decade
match(map_data$FIPS,this_decade$FIPS)
match_order <- match(map_data$FIPS,this_decade$FIPS)
head(this_decade)
race_field_name <- "pcthispanic"
data[,race_field_name]
this_decade[,race_field_name]
this_decade[,race_field_name][match_order]
map_data[,race_field_name] <- this_decade[,race_field_name][match_order]
head(map_data)
plot_counties_for_decade_and_race <- function(decade, race_field_name) {#
#
  # only data for this decade#
  this_decade <- subset(data, year == decade)#
#
  #match order of data and shapes fields#
  match_order <- match(map_data$FIPS,this_decade$FIPS)#
#
  # add this field to map_data#
  # NOTE: this syntax is weird. yes. but it's the same as:#
  # map_data$pcthispanic <- data$pcthispanic[match_order]#
  map_data[,race_field_name] <- this_decade[,race_field_name][match_order]#
#
  # breaks for colors. these are semi arbitrary, picked manually.#
  map_breaks <- c(0, .1, .2, .3, .4, 1)#
#
  # put our data into 5 groups#
  buckets <- cut(map_data[,race_field_name, breaks = map_breaks)#
#
  # make the groups numbers so they're less terrifying to look at.#
  numeric_buckets <- as.numeric(buckets)#
#
  #a vector of 5 colors. pick your own by typing display.brewer.all() in the R console.#
  colors <- brewer.pal(5,"YlOrRd")#
#
  #plot the map!#
  plot(shapes, col=colors[numeric_buckets])#
#
  # give it a title so we know what we're looking at.#
  title(paste(decade, race_field_name))#
#
}
plot_counties_for_decade_and_race <- function(decade, race_field_name) {#
#
  # only data for this decade#
  this_decade <- subset(data, year == decade)#
#
  #match order of data and shapes fields#
  match_order <- match(map_data$FIPS,this_decade$FIPS)#
#
  # add this field to map_data#
  # NOTE: this syntax is weird. yes. but it's the same as:#
  # map_data$pcthispanic <- data$pcthispanic[match_order]#
  map_data[,race_field_name] <- this_decade[,race_field_name][match_order]#
#
  # breaks for colors. these are semi arbitrary, picked manually.#
  map_breaks <- c(0, .1, .2, .3, .4, 1)#
#
  # put our data into 5 groups#
  buckets <- cut(map_data[,race_field_name, breaks = map_breaks)#
#
  # make the groups numbers so they're less terrifying to look at.#
  numeric_buckets <- as.numeric(buckets)#
#
  #a vector of 5 colors. pick your own by typing display.brewer.all() in the R console.#
  colors <- brewer.pal(5,"YlOrRd")#
#
  #plot the map!#
  plot(shapes, col=colors[numeric_buckets])#
#
  # give it a title so we know what we're looking at.#
  title(paste(decade, race_field_name))#
#
}
cut(map_data[,race_field_name], breaks = map_breaks)
map_breaks <- c(0, .1, .2, .3, .4, 1)#
#
  # put our data into 5 groups#
  buckets <- cut(map_data[,race_field_name], breaks = map_breaks)
buckets
numeric_buckets <- as.numeric(buckets)
numeric_buckets
plot_counties_for_decade_and_race <- function(decade, race_field_name) {#
#
  # only data for this decade#
  this_decade <- subset(data, year == decade)#
#
  #match order of data and shapes fields#
  match_order <- match(map_data$FIPS,this_decade$FIPS)#
#
  # add this field to map_data#
  # NOTE: this syntax is weird. yes. but it's the same as:#
  # map_data$pcthispanic <- data$pcthispanic[match_order]#
  map_data[,race_field_name] <- this_decade[,race_field_name][match_order]#
#
  # breaks for colors. these are semi arbitrary, picked manually.#
  map_breaks <- c(0, .1, .2, .3, .4, 1)#
#
  # put our data into 5 groups#
  buckets <- cut(map_data[,race_field_name], breaks = map_breaks)#
#
  # make the groups numbers so they're less terrifying to look at.#
  numeric_buckets <- as.numeric(buckets)#
#
  #a vector of 5 colors. pick your own by typing display.brewer.all() in the R console.#
  colors <- brewer.pal(5,"YlOrRd")#
#
  #plot the map!#
  plot(shapes, col=colors[numeric_buckets])#
#
  # give it a title so we know what we're looking at.#
  title(paste(decade, race_field_name))#
#
}
plot_counties_for_decade_and_race(2000, "pcthispanic")
unique(data$year)
names(data)
race_fields <- c("pctwhite", "pctblack", "pctamind", "pctasian", "pctother", "pcthispanic" )
par(mfrow=c(4, 6))#
#
race_fields <- c("pctwhite", "pctblack", "pctamind", "pctasian", "pctother", "pcthispanic" )#
#
for (i in race_fields) {#
  for (j in unique(data$year)) {#
    plot_counties_for_decade_and_race(j,i)    #
  }#
}
par(mfrow=c(6, 4))#
#
race_fields <- c("pctwhite", "pctblack", "pctamind", "pctasian", "pctother", "pcthispanic" )#
#
for (i in race_fields) {#
  for (j in unique(data$year)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
start a new pdf ---------------------------#
pdf(file="california-races.pdf")#
#
#this is puts all the plots on one screen#
par(mfrow=c(6, 4))#
for (i in race_fields) {#
  for (j in unique(data$year)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}#
#
#stop writing to the pdf ------------------#
dev.off()
start a new pdf ---------------------------#
pdf(file="california-races.pdf")#
#
#this is puts all the plots on one screen#
par(mfrow=c(6, 4), mar=c(0,0,0,0))#
for (i in race_fields) {#
  for (j in unique(data$year)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}#
#
#stop writing to the pdf ------------------#
dev.off()
this is puts all the plots on one screen#
par(mfrow=c(4, 4))#
#
# , mar=c(0,0,0,0)#
#
for (i in race_fields) {#
  for (j in unique(data$year)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
plot(shapes)
axis(1)
plot(shapes, xlim=c(-124, -114))
plot(shapes, xlim=c(-122, -118))
plot(shapes, xlim=c(-120, -118))
plot(shapes, xlim=c(-120, -119))
axis(1)
par(mfrow=c(4, 4), mar=c(.2, .2, .2, .2))#
#
# , mar=c(0,0,0,0)#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
race_fields <- c("pctwhite", "pctblack", "pctasian", "pcthispanic" )
par(mfrow=c(4, 4), mar=c(.5, .2, .2, .2))#
#
# , mar=c(0,0,0,0)#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
par(mfrow=c(4, 4), mar=c(.5, .5, .5, .5))#
#
# , mar=c(0,0,0,0)#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
par(mfrow=c(4, 4), mar=c(1, 1, 1, 1))#
#
# , mar=c(0,0,0,0)#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
plot_counties_for_decade_and_race <- function(decade, race_field_name) {#
#
  # only data for this decade#
  this_decade <- subset(data, year == decade)#
#
  #match order of data and shapes fields#
  match_order <- match(map_data$FIPS,this_decade$FIPS)#
#
  # add this field to map_data#
  # NOTE: this syntax is weird. yes. but it's the same as:#
  # map_data$pcthispanic <- data$pcthispanic[match_order]#
  map_data[,race_field_name] <- this_decade[,race_field_name][match_order]#
#
  # breaks for colors. these are semi arbitrary, picked manually.#
  map_breaks <- c(0, .1, .2, .3, .4, 1)#
#
  # put our data into 5 groups#
  buckets <- cut(map_data[,race_field_name], breaks = map_breaks)#
#
  # make the groups numbers so they're less terrifying to look at.#
  numeric_buckets <- as.numeric(buckets)#
#
  #a vector of 5 colors. pick your own by typing display.brewer.all() in the R console.#
  colors <- brewer.pal(5,"YlOrRd")#
#
  #plot the map!#
  plot(shapes, col=colors[numeric_buckets], border="white")#
#
  # give it a title so we know what we're looking at.#
  title(paste(race_field_name, decade))#
}#
#
#fields we want to plot#
race_fields <- c("pctwhite", "pctblack", "pctasian", "pcthispanic" )#
#
#this is puts all the plots on one screen#
par(mfrow=c(4, 4), mar=c(1, 1, 1, 1))#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
fields we want to plot#
race_fields <- c("pctwhite", "pctblack", "pctasian", "pcthispanic" )#
#
#this is puts all the plots on one screen#
par(mfrow=c(4, 4), mar=c(1, 1, 1, 1))#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
plot_counties_for_decade_and_race <- function(decade, race_field_name) {#
#
  # only data for this decade#
  this_decade <- subset(data, year == decade)#
#
  #match order of data and shapes fields#
  match_order <- match(map_data$FIPS,this_decade$FIPS)#
#
  # add this field to map_data#
  # NOTE: this syntax is weird. yes. but it's the same as:#
  # map_data$pcthispanic <- data$pcthispanic[match_order]#
  map_data[,race_field_name] <- this_decade[,race_field_name][match_order]#
#
  # breaks for colors. these are semi arbitrary, picked manually.#
  map_breaks <- c(0, .1, .2, .3, .4, 1)#
#
  # put our data into 5 groups#
  buckets <- cut(map_data[,race_field_name], breaks = map_breaks)#
#
  # make the groups numbers so they're less terrifying to look at.#
  numeric_buckets <- as.numeric(buckets)#
#
  #a vector of 5 colors. pick your own by typing display.brewer.all() in the R console.#
  colors <- brewer.pal(5,"YlOrRd")#
#
  #plot the map!#
  plot(shapes, col=colors[numeric_buckets], border="lightgrey", lwd=.3)#
#
  # give it a title so we know what we're looking at.#
  title(paste(race_field_name, decade))#
}#
#
#fields we want to plot#
race_fields <- c("pctwhite", "pctblack", "pctasian", "pcthispanic" )#
#
#this is puts all the plots on one screen#
par(mfrow=c(4, 4), mar=c(1, 1, 1, 1))#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
plot_counties_for_decade_and_race <- function(decade, race_field_name) {#
#
  # only data for this decade#
  this_decade <- subset(data, year == decade)#
#
  #match order of data and shapes fields#
  match_order <- match(map_data$FIPS,this_decade$FIPS)#
#
  # add this field to map_data#
  # NOTE: this syntax is weird. yes. but it's the same as:#
  # map_data$pcthispanic <- data$pcthispanic[match_order]#
  map_data[,race_field_name] <- this_decade[,race_field_name][match_order]#
#
  # breaks for colors. these are semi arbitrary, picked manually.#
  map_breaks <- c(0, .1, .2, .3, .4, 1)#
#
  # put our data into 5 groups#
  buckets <- cut(map_data[,race_field_name], breaks = map_breaks)#
#
  # make the groups numbers so they're less terrifying to look at.#
  numeric_buckets <- as.numeric(buckets)#
#
  #a vector of 5 colors. pick your own by typing display.brewer.all() in the R console.#
  colors <- brewer.pal(5,"YlOrRd")#
#
  #plot the map!#
  plot(shapes, col=colors[numeric_buckets], border="lightgrey")#
#
  # give it a title so we know what we're looking at.#
  title(paste(race_field_name, decade))#
}#
#
#fields we want to plot#
race_fields <- c("pctwhite", "pctblack", "pctasian", "pcthispanic" )#
#
#this is puts all the plots on one screen#
par(mfrow=c(4, 4), mar=c(1, 1, 1, 1))#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
c("white", brewer.pal(4,"YlOrRd")
)
plot_counties_for_decade_and_race <- function(decade, race_field_name) {#
#
  # only data for this decade#
  this_decade <- subset(data, year == decade)#
#
  #match order of data and shapes fields#
  match_order <- match(map_data$FIPS,this_decade$FIPS)#
#
  # add this field to map_data#
  # NOTE: this syntax is weird. yes. but it's the same as:#
  # map_data$pcthispanic <- data$pcthispanic[match_order]#
  map_data[,race_field_name] <- this_decade[,race_field_name][match_order]#
#
  # breaks for colors. these are semi arbitrary, picked manually.#
  map_breaks <- c(0, .1, .2, .3, .4, 1)#
#
  # put our data into 5 groups#
  buckets <- cut(map_data[,race_field_name], breaks = map_breaks)#
#
  # make the groups numbers so they're less terrifying to look at.#
  numeric_buckets <- as.numeric(buckets)#
#
  #a vector of 5 colors. pick your own by typing display.brewer.all() in the R console.#
  colors <- c("white", brewer.pal(4,"YlOrRd"))#
#
  #plot the map!#
  plot(shapes, col=colors[numeric_buckets], border="lightgrey")#
#
  # give it a title so we know what we're looking at.#
  title(paste(race_field_name, decade))#
}#
#
#fields we want to plot#
race_fields <- c("pctwhite", "pctblack", "pctasian", "pcthispanic" )#
#
#this is puts all the plots on one screen#
par(mfrow=c(4, 4), mar=c(1, 1, 1, 1))#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
fields we want to plot#
race_fields <- c("pctwhite", "pcthispanic", "pctblack", "pctasian" )#
#
#this is puts all the plots on one screen#
par(mfrow=c(4, 4), mar=c(1, 1, 1, 1))#
#
for (i in race_fields) {#
  for (j in c(1990, 2000, 2010, 2020)) {#
    plot_counties_for_decade_and_race(j,i)#
  }#
}
